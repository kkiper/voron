[include shell_command.cfg]
[include kiauh_macros.cfg]
[include stepper.cfg]
[include display.cfg]
[include klicky.cfg]
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_3D0014000C50563046363120-if00

[pause_resume]

[display_status]

[virtual_sdcard]
path: ~/gcode_files

[printer]
kinematics = corexy
max_velocity = 300
max_accel = 3000
max_z_velocity = 20
max_z_accel = 350
square_corner_velocity = 5.0



# # 11/14 Probe location: X: 53, Y: 300

[z_calibration]
probe_nozzle_x = 205.6 
probe_nozzle_y = 300
probe_switch_x = 200.60
probe_switch_y = 279.90
switch_offset = 0.43
max_deviation = 7
samples = 7
samples_result = median
speed = 100
probing_second_speed = 3.5
probing_retract_dist = 1.25
probing_first_fast = false

[gcode_macro CALIBRATE_Z]
rename_existing = BASE_CALIBRATE_Z
gcode = 
	CG28
	ATTACH_PROBE
	BASE_CALIBRATE_Z
	DOCK_PROBE

[bed_mesh]
mesh_min = 20, 45
mesh_max = 280, 280
speed = 150
horizontal_move_z = 15
probe_count = 5,5
algorithm = bicubic
relative_reference_index = 12
split_delta_z = 0.025
move_check_distance = 5
mesh_pps = 2,2




[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	{% set V = printer["gcode_macro User_Variables"].verbose %}
	{% if V %}
	{ action_respond_info("Bed Mesh Calibrate") }
	{% endif %}
	CheckProbe action=query
	Attach_Probe
	_BED_MESH_CALIBRATE {% for p in params
	%}{'%s=%s ' % (p, params[p])}{%
	endfor %}
	Dock_Probe

[gcode_macro MESH_STORE]
variable_save_at_end = 'false'
gcode = 
	{% set save = params.SAVE|default('true') %}
	BED_MESH_CALIBRATE
	BED_MESH_PROFILE SAVE=Voron-Bed_Temp-{printer.heater_bed.target|int}C
	BED_MESH_PROFILE REMOVE=default
	G90                    ; set absolute
	G0 Z15 F900           ; lift nozzle
	G0 X150 Y150 Z30 F7200 ; move to middle
	{% if save|lower == 'true' %}
	_PRINT_AR T="MESH: Save Config!"
	SAVE_CONFIG
	{% else %}
	_PRINT_AR T="MESH: Save Config after print done"
	SET_GCODE_VARIABLE MACRO=MESH_STORE VARIABLE=save_at_end VALUE='"true"'
	{% endif %}

[gcode_macro MESH_LOAD]
gcode = 
	{% set auto = params.AUTO|default('false') %}
	{% set bed_temp = printer.heater_bed.target|int %}
	{% if printer.configfile.config["bed_mesh Voron-Bed_Temp-" + bed_temp|string + "C"] is defined %}
	BED_MESH_CLEAR
	BED_MESH_PROFILE LOAD=Voron-Bed_Temp-{printer.heater_bed.target|int}C
	_PRINT_AR T="{"MESH: Voron-Bed_Temp-" + bed_temp|string + "C loaded"}"
	{% else %}
	{% if auto|lower == 'true' %}
	_PRINT_AR T="{"MESH: Voron-Bed_Temp-" + bed_temp|string + "C needs to be generated"}"
	MESH_STORE SAVE=false
	{% else %}
	_PRINT_AR T="{"MESH ERROR: Voron-Bed_Temp-" + bed_temp|string + "C not defined"}"
	{% endif %}
	{% endif %}

[delayed_gcode _MESH_SAVE]
gcode = 
	{% if printer["gcode_macro MESH_STORE"].save_at_end == 'true'  %}
	_PRINT_AR T="MESH: Save Config!"
	SAVE_CONFIG
	{% endif %}

[gcode_macro HOME]
default_parameter_optional = false
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes or not params.OPTIONAL == "true" %}
	G28
	{% endif %}

[gcode_macro FEEDBACK]
default_parameter_msg = 
gcode = 
	{ action_respond_info(params.MSG) }
	M117 {params.MSG}

[gcode_macro CENTER_XY]
gcode = 
	{% set xM = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set yM = printer.configfile.config["stepper_y"]["position_max"]|float %}
	G1 X{xM / 2} Y{yM / 2} Z30 F3600

[gcode_macro PARK]
default_parameter_hop = 0
gcode = 
	{% set xM = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set yM = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set finalX = -1 %}
	{% if "X" in params %}
	{% set finalX = params.X|float %}
	{% endif %}
	{% if finalX > xM %}
	{% set finalX = xM %}
	{% endif %}
	FEEDBACK MSG="Parking toolhead..."
	HOME OPTIONAL=true
	SAVE_GCODE_STATE NAME=PARK
	{% if params.HOP > 0 %}
	G91
	G0 Z{params.HOP} F1800
	G90
	{% endif %}
	{% if finalX < 0 %}
	G0 Y{yM} F3600
	{% else %}
	G0 X{finalX} Y{yM} F6000
	{% endif %}
	FEEDBACK MSG="Toolhead parked"
	UPDATE_DELAYED_GCODE ID=clear_display DURATION=20
	RESTORE_GCODE_STATE NAME=PARK

[gcode_macro SERVICE]
default_parameter_type = z
variable_speed = 1500
gcode = 
	{% set xM = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set yM = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set zM = printer.configfile.config["stepper_z"]["position_max"]|float %}
	{% set x = (xM / 2)|int %}
	{% set y = (yM / 2)|int %}
	{% set z = (zM / 2)|int %}
	{% set accepted = (zM / 2)|int %}
	{% if params.TYPE == "bed" %}
	{% set x = xM|int %}
	{% set z = (zM / 8 * 7)|int %}
	{% elif params.TYPE == "extruder" %}
	{% set y = (yM / 8)|int %}
	{% set z = (zM / 8 * 2)|int %}
	{% elif params.TYPE == "nozzle" %}
	{% set y = (yM / 8)|int %}
	{% set z = (zM / 8 * 6)|int %}
	{% elif params.TYPE == "tool" %}
	{% set y = (yM / 8)|int %}
	{% elif params.TYPE == "z" %}
	{% else %}
	{ action_raise_error(
	"Service: Error\n"
	"Illegal option: '%.1s'\n"
	"Please specify what to service:\n"
	"- bed: easy access to the print bed\n"
	"- extruder: easy access to swap filament\n"
	"- nozzle: access to the bottom of the toolhead\n"
	"- tool: easy access to the toolhead\n"
	"- z: balanced access to the z-belt components" % (params.TYPE)) }
	{% endif %}
	FEEDBACK MSG="Service: Homing"
	HOME OPTIONAL=true
	SAVE_GCODE_STATE NAME=SERVICE
	FEEDBACK MSG="Service: Moving"
	G90
	G0 X{x} Y{y} Z{z} F{speed}
	FEEDBACK MSG="Service: Ready"
	UPDATE_DELAYED_GCODE ID=clear_display DURATION=20
	RESTORE_GCODE_STATE NAME=SERVICE

[gcode_macro PRINT_END]
gcode = 
	M400                           ; wait for buffer to clear
	FEEDBACK MSG="Print successful!"
	BED_MESH_CLEAR
	G92 E0                         ; zero the extruder
	G1 E-10.0 F3600                ; retract filament
	G91                            ; relative positioning
	G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
	TURN_OFF_HEATERS
	M107                           ; turn off fan
	G1 Z2 F3000                    ; move nozzle up 2mm
	G90                            ; absolute positioning
	PARK HOP=5

[gcode_macro PRINT_CANCEL]
gcode = 
	M400                           ; wait for buffer to clear
	FEEDBACK MSG="Print canceled!"
	BED_MESH_CLEAR
	TURN_OFF_HEATERS
	M107                           ; turn off fan
	PARK HOP=5

[gcode_macro LOAD_OR_CREATE_MESH]
default_parameter_profile = default
gcode = 
	HOME OPTIONAL=true
	LOAD_PROFILE_MESH PROFILE={ params.PROFILE }
	CREATE_PROFILE_MESH PROFILE={ params.PROFILE }

[gcode_macro LOAD_PROFILE_MESH]
default_parameter_profile = default
gcode = 
	BED_MESH_PROFILE LOAD={ params.PROFILE }

[gcode_macro CREATE_PROFILE_MESH]
default_parameter_profile = default
gcode = 
	{% if printer.bed_mesh.profile_name != params.PROFILE %}
	BED_MESH_CALIBRATE
	BED_MESH_PROFILE SAVE={ params.PROFILE }
	{% endif %}
	LOAD_PROFILE_MESH PROFILE={ params.PROFILE }

[gcode_macro HEAT]
default_parameter_block = true
gcode = 
	FEEDBACK MSG="Heating..."
	{% set doHeatChamber = params.CHAMBER is defined and params.CHAMBER >= 0 %}
	{% set doHeatBed = params.BED is defined and params.BED >= 0 %}
	{% set doHeatExtruder = params.EXTRUDER is defined and params.EXTRUDER >= 0 %}
	{% if doHeatBed %}
	M140 S{ params.BED }
	{% endif %}
	{% if doHeatExtruder %}
	M104 S{ params.EXTRUDER }
	{% endif %}
	{% if doHeatChamber %}
	M141 S{ params.CHAMBER }
	{% endif %}
	{% if params.BLOCK != "false" %}
	{% if doHeatBed and params.BED > 0 %}
	M190 S{ params.BED }
	{% endif %}
	{% if doHeatExtruder and params.EXTRUDER > 0 %}
	M109 S{ params.EXTRUDER }
	{% endif %}
	{% endif %}
	UPDATE_DELAYED_GCODE ID=clear_display DURATION=10

# [menu __main __service]
# type = list
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Service

# [menu __main __service __level_gantry]
# type = command
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Level gantry
# gcode = 
# 	HOME OPTIONAL=true
# 	QUAD_GANTRY_LEVEL

# [menu __main __service __park]
# type = input
# enable = {not printer.idle_timeout.state == "Printing"}
# name = {"Park at %3.0f" % (menu.input)}
# input = {printer.gcode_move.position.x}
# input_min = 0
# input_max = {printer.configfile.config["stepper_x"]["position_max"]|float}
# input_step = 1
# gcode = PARK X={menu.input} HOP=5

# [menu __main __service __bed]
# type = command
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Service bed
# gcode = SERVICE TYPE=bed

# [menu __main __service __extruder]
# type = command
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Service extruder
# gcode = SERVICE TYPE=extruder

# [menu __main __service __nozzle]
# type = command
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Service nozzle
# gcode = SERVICE TYPE=nozzle

# [menu __main __service __tool]
# type = command
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Service toolhead
# gcode = SERVICE TYPE=tool

# [menu __main __service __zaxis]
# type = command
# enable = {not printer.idle_timeout.state == "Printing"}
# name = Service z-axis
# gcode = SERVICE TYPE=z

[gcode_macro PRINT_START]
variable_bedtemp = 0
variable_hotendtemp = 0
variable_chambertemp = 0
gcode = 
	G28
	{% set bed = params.BED|default(110)|int %}
	{% set hotend = params.HOTEND|default(230)|int %}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}
	RESETSPEEDS																							; reset speed, accel etc to configured values
	M104 S140																							; set hotend to no-ooze temp
	M140 S{bed}																							; set bed to target temp
	M190 S{bed} 																					    ; wait for bed final temp
	G1 Z10
	PRINT_START2

[gcode_macro PRINT_START2]
gcode = 
	BED_MESH_CLEAR																				        ; attach probe
	QUAD_GANTRY_LEVEL																					; quad gantry level
	BED_MESH_CALIBRATE																					; mesh
	DOCK_PROBE_UNLOCK																					; dock probe
	G90                                																	; absolute positioning
	M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 											; set & wait for hotend final temp
	G28 Z																								; home z with hot nozzle
	CALIBRATE_Z	                                                                                        ; calibrate z offset with hot nozzle
	G92 E0                              																; Reset Extruder
	G1 X0 Y20 Z0.3 F1800.0           																; Move to start position
	G1 X0 Y200.0 Z0.3 F1500.0 E15     																; Draw the first line
	G92 E0                              																; Reset Extruder
	G1 Z10.0 F3000                       																; Move Z Axis up

[gcode_macro PARKCENTER]
gcode = 
	{% set Z = params.Z|default(30)|float %}
	SAVE_GCODE_STATE NAME=PARKCENTER_state
	CG28                          ; Home if not already homed
	G90                            ; absolute positioning
	G0 X150 Y150 Z{Z} F12000       ; move to center
	RESTORE_GCODE_STATE NAME=PARKCENTER_state

[gcode_macro CG28]
gcode = 
	{% if "xyz" not in printer.toolhead.homed_axes %}
	G28
	{% endif %}

[gcode_macro XYCG28]
gcode = 
	{% if "xy" not in printer.toolhead.homed_axes %}
	G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode = 
	{% if "z" not in printer.toolhead.homed_axes %}
	G28 Z
	{% endif %}

[gcode_macro RESETSPEEDS]
gcode = 
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}  ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

[adxl345]
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
axes_map = -y,z,x
cs_pin = PA4

[resonance_tester]
accel_chip = adxl345
probe_points = 
	150,150,20

[gcode_macro clean_nozzle]
variable_location_bucket_rear = True
variable_enable_purge = True
variable_purge_len = 10
variable_purge_spd = 150
variable_purge_temp_min = 200
variable_purge_ret = 2
variable_ooze_dwell = 2
variable_brush_top = 5
variable_clearance_z = 5
variable_wipe_qty = 3
variable_prep_spd_xy = 3000
variable_prep_spd_z = 1500
variable_wipe_spd_xy = 5000
variable_brush_start = 50
variable_brush_width = 52
variable_brush_front = 0
variable_brush_depth = 0
variable_bucket_left_width = 67
variable_bucket_right_width = 40
variable_bucket_gap = 22
variable_bucket_start = 0
variable_bucket_pos = 1
gcode = 
	{% if "xyz" in printer.toolhead.homed_axes %}
	SAVE_GCODE_STATE NAME=clean_nozzle
	G90
	{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% if enable_purge %}
	SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}
	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	{% if location_bucket_rear %}
	G1 Y{Ry} F{prep_spd_xy}
	{% else %}
	G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
	{% endif %}
	G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}
	{% if printer.extruder.temperature >= purge_temp_min %}
	M83      ; relative mode
	G1 E{purge_len} F{purge_spd}
	G1 E-{purge_ret} F{purge_spd * 5}
	G4 P{ooze_dwell * 1000}
	G92 E0   ; reset extruder
	{% endif %}
	{% endif %}
	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}
	{% if location_bucket_rear %}
	G1 Y{Ry}
	{% else %}
	G1 Y{brush_front + (brush_depth / 2)}
	{% endif %}
	G1 Z{brush_top} F{prep_spd_z}
	{% for wipes in range(1, (wipe_qty + 1)) %}
	G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
	G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
	{% endfor %}
	M117 Cleaned!
	G1 Z{brush_top + clearance_z} F{prep_spd_z}
	G1 X{bucket_left_width / 4} F{prep_spd_xy}
	RESTORE_GCODE_STATE NAME=clean_nozzle
	{% else %}
	{ action_raise_error("Please home your axes!") }
	M117 Please home first!
	{% endif %}

[thermistor NCU15XH103D6SRC]
temperature1 = 25
resistance1 = 10000.
temperature2 = 50
resistance2 = 4160.1
temperature3 = 100
resistance3 = 976.0

[temperature_sensor chamber]
sensor_type = NCU15XH103D6SRC
sensor_pin = PC1
min_temp = 0
max_temp = 100
gcode_id = C

[adc_temperature stm32f4_mcu]
temperature1 = 25
voltage1 = 0.760
temperature2 = 125
voltage2 = 1.010

[heater_bed]
heater_pin = PB4
sensor_type = NTC 100K MGB18-104F39050L32
sensor_pin = PC3
max_power = 0.55
min_temp = 0
max_temp = 120
control = pid
pid_kp = 58.437
pid_ki = 2.347
pid_kd = 363.769


[heater_fan hotend_fan]
pin = PB0
max_power = 1.0
kick_start_time = 0.5
heater = extruder
heater_temp = 50.0

[fan]
pin = PB1
max_power = 0.4
kick_start_time = 0.5
off_below = 0.10

[heater_fan controller_fan]
pin = PC8
kick_start_time = 0.5
heater = heater_bed
heater_temp = 45.0

[idle_timeout]
timeout = 1800

[quad_gantry_level]
gantry_corners = 
	-60,-10
	360,370
points = 
	50,25
	50,225
	250,225
	250,25
speed = 150
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.0075
max_adjust = 8

[virtual_sdcard]
path = ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro G29]
gcode = 
	BED_MESH_CLEAR
	G28
	BED_MESH_CALIBRATE
	BED_MESH_PROFILE SAVE=x1

[gcode_macro G32]
gcode = 
	BED_MESH_CLEAR
	G28
	QUAD_GANTRY_LEVEL
	G28
	G0 X150 Y150 Z30 F3600

[gcode_macro CANCEL_PRINT]
rename_existing = BASE_CANCEL_PRINT
gcode = 
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	BASE_CANCEL_PRINT

